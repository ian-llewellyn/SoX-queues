#!/bin/bash
SOX_BIN=/usr/local/bin/sox

## Usage function
usage() {
	if [ ! -z $1 ]; then
		echo "Unrecognised command line parameter: $1" >&2
	fi
	echo "Usage: $0 <-c config_file>" >&2
	return 0
}

## Command line args
while [ $# -ne 0 ]; do
	case $1 in
	-c)
		shift
		config_file="$1"
		;;
	*)
		usage "$1"
		exit 1
		;;
	esac
	shift
done

# Generate our own list of config files if none was provided
if [ -z "$config_file" ]; then
	usage
	exit 1
fi

sox_do() {
	# Move the source file into the processing directory
	mv $QUEUE_DIR/$file $PROCESSING_DIR/$file
	if [ $? -ne 0 ]; then
		echo "There was a problem moving $QUEUE_DIR/$file for processing." >&2
		continue
	fi

	IN_FILE=$PROCESSING_DIR/$file
	OUT_FILE=$OUTPUT_DIR/.$file

	# Get SoX to do it's thing
	#echo $SOX_BIN $GL_OPTS $EFFECTS_FILE $IN_OPTS $IN_FILE $OUT_OPTS $OUT_FILE $EFFECTS	# DEBUG
	$SOX_BIN $GL_OPTS $EFFECTS_FILE $IN_OPTS $IN_FILE $OUT_OPTS $OUT_FILE $EFFECTS
	if [ $? -eq 0 ]; then
		# Completed Successfully
		echo "Successfully processed $file"
		mv $OUT_FILE $OUTPUT_DIR/$file	# Remove the '.'
		mv $PROCESSING_DIR/$file $SUCCESS_DIR/$file
	else
		# Did not complete Successfully
		echo "Failed to process $file" >&2
		test -f $OUT_FILE && rm $OUT_FILE
		mv $PROCESSING_DIR/$file $FAILED_DIR/$file
	fi
}

sox_availability() {
	# Is MAX_SOX_INSTANCES already (b)reached?
	sox_instances=$(pgrep -f $SOX_BIN | wc -l)
	if [ -z "$sox_instances" ]; then sox_instances=0 ; fi
	echo "SoX Instances: $sox_instances: $(pgrep -f $SOX_BIN)" >&2 # DEBUG

	test $sox_instances -lt $MAX_SOX_INSTANCES
	return $?
}

## Read in the configuration file
if [ ! -r "$config_file" ]; then
	echo "Could not read config file: $config_file" >&2
	exit 1
else
	source "$config_file"
	if [ ! -z "$EFFECTS_FILE" ]; then
		EFFECTS_FILE="--effects-file $EFFECTS_FILE"
	fi
fi

## Start monitoring the queue directory
inotifywait -m -e CLOSE_WRITE -e MOVED_TO "$QUEUE_DIR" |
while read dir operation file ; do
#	echo "Directory: $dir Operation: $operation File: $file" >&2 # DEBUG

	# Is this a dot file?
	if [[ "$file" == .* ]]; then
		# Yes it is! Skip
		echo "Not processing dot file: $file" >&2 # DEBUG
		continue
	fi

	# Is there a need to double check this?
	if [[ "$operation" != *CLOSE_WRITE* ]] && [[ "$operation" != *MOVED_TO* ]]; then
		echo "Operation is not CLOSE_WRITE or MOVED_TO" >&2 # DEBUG
		continue
	fi

	# Delay here until there is an opening for us..
	until sox_availability; do
		echo "Waiting for other SoX instances to finish." >&2
		sleep 5
	done

	# Process the audio
	sox_do &

	# Give SoX a chance to start
	usleep 500000
done
